{"ast":null,"code":"var _jsxFileName = \"/Users/nayanpaavalar/Desktop/CS/Personal_Project1/real_hypertyper/server/client/src/components/GhostPage.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport TypeWord from './TypeWord';\nimport DisplayRank from './DisplayRank';\nimport Timer from './Timer';\nimport './GhostPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GhostPage() {\n  _s();\n  //make CurrentWord a piece of state\n  //Current word is 0 indexed\n  //the word that the user is on\n  const [currentWord, setCurrentWord] = useState(0);\n  //current time\n  const [currentTime, setCurrentTime] = useState(0);\n  //show input box\n  const [showInput, setShowInput] = useState(false);\n  //some weird logic I have to show stats and input\n  const [balance, setBalance] = useState(true);\n  //bool for when ghost ends\n  const [ghostEnd, setGhostEnd] = useState(false);\n  //time for when ghost ends\n  const [ghostTime, setGhostTime] = useState(0);\n  //time for when user ends\n  const [userTime, setUserTime] = useState(0);\n  document.body.style = 'background-color: rgb(47, 47, 47);';\n\n  //text sample\n  const textForDisplay = {\n    numWords: 30,\n    textSample: [\"Four \", \"score \", \"and \", \"seven \", \"years \", \"ago \", \"our \", \"fathers \", \"brought \", \"forth \", \"on \", \"this \", \"continent, \", \"a \", \"new \", \"nation, \", \"conceived \", \"in \", \"Liberty, \", \"and \", \"dedicated \", \"to \", \"the \", \"proposition \", \"that \", \"all \", \"men \", \"are \", \"created \", \"equal.\"]\n  };\n\n  //increments or decrements the word count based on the direction\n  const nextWord = (direction, time) => {\n    if (direction) {\n      console.log('nextWord time: ' + time);\n      setCurrentWord(currentWord + 1);\n      setCurrentTime(time);\n      console.log('nextWord' + currentWord);\n      //currentword time\n      console.log('nextWord time ' + currentTime);\n    } else if (currentWord > 0) {\n      setCurrentWord(currentWord - 1);\n    } //UNLESS CURRWORD IS 0\n\n    console.log(\"nextWord currWord:\" + currentWord);\n  };\n\n  //when the user finishes\n  const handleEnd = () => {\n    console.log('time ended');\n    setShowInput(true);\n  };\n\n  //shows the text sample, each completed word is green\n  const renderedText = textForDisplay.textSample.map((word, i) => {\n    // return <div className=\"text\">{word}</div>;\n    if (i < currentWord) {\n      return /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"completedText\",\n        children: word\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"text\",\n        children: word\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n    }\n  });\n\n  //when the user finished\n  const handleFinish = time => {\n    setUserTime(time);\n    setBalance(false);\n    console.log('user time: ' + userTime);\n  };\n\n  //when the ghost finished\n  const handleGhostFinish = time1 => {\n    //setBalance(false);\n    setGhostTime(time1);\n    setGhostEnd(true);\n    console.log('ghost time: ' + ghostTime);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timerBox\",\n      children: /*#__PURE__*/_jsxDEV(Timer, {\n        initialMinute: 0,\n        initialSeconds: 15,\n        onEnd: handleEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bigBoy\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textBox\",\n          children: renderedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputBox\",\n          children: [showInput && balance ? /*#__PURE__*/_jsxDEV(TypeWord, {\n            onComplete: nextWord,\n            currentWord: currentWord,\n            textForDisplay: textForDisplay,\n            finished: handleFinish\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this) : null, !balance && ghostEnd ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"finishStats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finishName\",\n              children: \"Finished!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finishTime\",\n              children: [\"Ghost finished in: \", Math.floor(ghostTime / 1000), \" seconds\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finishTime\",\n              children: [\"You finished in: \", Math.floor(userTime / 1000), \" seconds\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"podiumBox\",\n        children: showInput ? /*#__PURE__*/_jsxDEV(DisplayRank, {\n          currentWord: currentWord,\n          currentTime: currentTime,\n          sampleAmount: textForDisplay.numWords,\n          ghostFinish: handleGhostFinish\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ranksBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"placement\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"placement\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(GhostPage, \"3jMJApGKd0DnRQlTQwZ4VbNN8WQ=\");\n_c = GhostPage;\nexport default GhostPage;\nvar _c;\n$RefreshReg$(_c, \"GhostPage\");","map":{"version":3,"names":["useState","TypeWord","DisplayRank","Timer","jsxDEV","_jsxDEV","GhostPage","_s","currentWord","setCurrentWord","currentTime","setCurrentTime","showInput","setShowInput","balance","setBalance","ghostEnd","setGhostEnd","ghostTime","setGhostTime","userTime","setUserTime","document","body","style","textForDisplay","numWords","textSample","nextWord","direction","time","console","log","handleEnd","renderedText","map","word","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleFinish","handleGhostFinish","time1","initialMinute","initialSeconds","onEnd","onComplete","finished","Math","floor","sampleAmount","ghostFinish","_c","$RefreshReg$"],"sources":["/Users/nayanpaavalar/Desktop/CS/Personal_Project1/real_hypertyper/server/client/src/components/GhostPage.js"],"sourcesContent":["import { useState } from 'react';\nimport TypeWord from './TypeWord';\nimport DisplayRank from './DisplayRank';\nimport Timer from './Timer';\nimport './GhostPage.css';\n\nfunction GhostPage() {\n  //make CurrentWord a piece of state\n  //Current word is 0 indexed\n  //the word that the user is on\n  const [currentWord, setCurrentWord] = useState(0);\n  //current time\n  const [currentTime, setCurrentTime] = useState(0);\n  //show input box\n  const [showInput, setShowInput] = useState(false);\n  //some weird logic I have to show stats and input\n  const [balance, setBalance] = useState(true);\n  //bool for when ghost ends\n  const [ghostEnd, setGhostEnd] = useState(false);\n  //time for when ghost ends\n  const [ghostTime, setGhostTime] = useState(0);\n  //time for when user ends\n  const [userTime, setUserTime] = useState(0);\n  \n  document.body.style = 'background-color: rgb(47, 47, 47);';\n\n  //text sample\n  const textForDisplay = {\n    numWords: 30,\n    textSample: [\n      \"Four \", \"score \", \"and \", \"seven \", \"years \", \"ago \", \"our \", \n      \"fathers \", \"brought \", \"forth \", \"on \" , \"this \", \"continent, \", \n      \"a \", \"new \", \"nation, \", \"conceived \", \"in \", \"Liberty, \", \"and \", \n      \"dedicated \", \"to \", \"the \", \"proposition \", \"that \", \"all \", \"men \", \n      \"are \", \"created \", \"equal.\"\n    ]\n  };\n\n  //increments or decrements the word count based on the direction\n  const nextWord = (direction, time) => {\n    if (direction) {\n      console.log('nextWord time: ' + time);\n      setCurrentWord(currentWord + 1);\n      setCurrentTime(time);\n      console.log('nextWord' + currentWord);\n      //currentword time\n      console.log('nextWord time ' + currentTime);\n    } else if (currentWord > 0) {\n      setCurrentWord(currentWord - 1);\n    }//UNLESS CURRWORD IS 0\n    \n    console.log(\"nextWord currWord:\" + currentWord);\n  };\n\n  //when the user finishes\n  const handleEnd = () => {\n    console.log('time ended');\n    setShowInput(true);\n  };\n\n  //shows the text sample, each completed word is green\n  const renderedText = textForDisplay.textSample.map((word, i) => {\n   // return <div className=\"text\">{word}</div>;\n    if (i < currentWord) {\n      return <pre className=\"completedText\" key={i}>{word}</pre>;\n    } else {\n      return <pre className=\"text\" key={i}>{word}</pre>;\n    }\n  });\n\n  //when the user finished\n  const handleFinish = (time) => {\n    setUserTime(time);\n    setBalance(false);\n    console.log('user time: ' + userTime);\n  };\n\n  //when the ghost finished\n  const handleGhostFinish = (time1) => {\n    //setBalance(false);\n    setGhostTime(time1);\n    setGhostEnd(true);\n    console.log('ghost time: ' + ghostTime);\n  };\n\n  return (\n    <div>\n      <div className=\"timerBox\">\n        <Timer initialMinute={0} initialSeconds={15} onEnd={handleEnd}/>\n      </div>\n      <div className=\"bigBoy\">\n        <div className=\"leftBox\">\n          <div className=\"textBox\">{renderedText}</div>\n          <div className=\"inputBox\">\n            { showInput && balance\n              ? <TypeWord onComplete={nextWord} currentWord={currentWord} textForDisplay={textForDisplay} finished={handleFinish}/>\n              : null \n            }\n            {\n              !balance && ghostEnd\n              ? \n              <div className=\"finishStats\"> \n                  <div className=\"finishName\">Finished!</div>\n                  <div className=\"finishTime\">Ghost finished in: {Math.floor(ghostTime / 1000)} seconds</div>\n                  <div className=\"finishTime\">You finished in: {Math.floor(userTime / 1000)} seconds</div>\n              </div>\n              :null\n            }\n          </div>\n        </div>\n        <div className=\"podiumBox\">\n          { showInput\n            ? <DisplayRank currentWord={currentWord} currentTime={currentTime} sampleAmount={textForDisplay.numWords} ghostFinish={handleGhostFinish}/>\n            : \n            <div className=\"ranksBox\">\n              <div className=\"placement\">1</div>\n              <div className=\"placement\">2</div>\n          </div>\n          }\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default GhostPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}