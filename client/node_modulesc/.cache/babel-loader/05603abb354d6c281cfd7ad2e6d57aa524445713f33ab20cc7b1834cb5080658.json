{"ast":null,"code":"var _jsxFileName = \"/Users/nayanpaavalar/Desktop/CS/Personal_Project1/real_hypertyper/server/client/src/components/TypeWord.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './TypeWord.css';\n\n//Start Time\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet t0 = 0;\nfunction TypeWord({\n  onComplete,\n  currentWord,\n  textForDisplay,\n  finished\n}) {\n  _s();\n  const [word, setWord] = useState('');\n  //-1 wrong, 0 blank, 1 correct\n  const [correct, setCorrect] = useState(0);\n  //the current state of the word that the person is typing\n\n  //start timer (t0)\n  useEffect(() => {\n    t0 = performance.now();\n  }, []);\n\n  //checks whether current word is right or not\n  const checkWord = mostUpdated => {\n    for (let i = 0; i < mostUpdated.length; ++i) {\n      if (textForDisplay.textSample[currentWord][i] !== mostUpdated[i]) {\n        setCorrect(-1);\n        console.log('false');\n        return false;\n      }\n      setCorrect(0);\n    }\n\n    //FOR DEV\n    console.log(mostUpdated.length);\n    console.log(textForDisplay.textSample[currentWord].length);\n\n    //when the word is complete the input moves on to the next word\n    if (mostUpdated.length === textForDisplay.textSample[currentWord].length) {\n      console.log('true');\n      const forward = true;\n\n      //time from the beginning till the end of the completed word\n      const tAfterWord = performance.now() - t0;\n\n      //increments word count\n      onComplete(forward, tAfterWord);\n\n      //ends timer once the user completes the last word  \n      if (currentWord === textForDisplay.numWords - 1) {\n        const t1 = performance.now();\n        console.log(\"Call to doSomething took \" + (t1 - t0) + \" milliseconds.\");\n        //finished, sends end time to App\n        finished(t1 - t0);\n      }\n      //empties input after the word is complete\n      //when this is empty is when someone can go backwards\n      setWord('');\n      //if (currentWord === textForDisplay.numWords)\n    }\n  }; //CHECKWORD\n\n  //whenever the user backspace and the input is empty, the word count decrements to the previous word\n  const handleKeyDown = event => {\n    if (event.key === 'Backspace' && word.length === 0 && currentWord > 0) {\n      const forward2 = false;\n      onComplete(forward2);\n\n      //FOR DEV\n      console.log(\"handleKey Word: \" + currentWord);\n      const backWord = textForDisplay.textSample[currentWord - 1]; // -1 is very sussy\n      const numLetters = backWord.length;\n      backWord.substring(0, numLetters - 1);\n      setWord(backWord);\n\n      //FOR DEV\n      console.log('backy!');\n    }\n  };\n\n  //handles any change in the input state\n  const handleChange = event => {\n    setWord(event.target.value);\n    checkWord(event.target.value);\n\n    //FOR DEV\n    console.log(\"-\" + event.target.value + \"-\");\n    console.log(\"Which Word: \" + currentWord);\n  }; //HANDLECHANGE\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"helpText\",\n      children: \"Type Here:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), correct === -1 ? /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"wrong\",\n      type: \"text\",\n      value: word,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"blank\",\n      type: \"text\",\n      value: word,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(TypeWord, \"8eZhZYcYiYXbTAnAp6OL3RQDJGE=\");\n_c = TypeWord;\nexport default TypeWord;\nvar _c;\n$RefreshReg$(_c, \"TypeWord\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","t0","TypeWord","onComplete","currentWord","textForDisplay","finished","_s","word","setWord","correct","setCorrect","performance","now","checkWord","mostUpdated","i","length","textSample","console","log","forward","tAfterWord","numWords","t1","handleKeyDown","event","key","forward2","backWord","numLetters","substring","handleChange","target","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onKeyDown","autoFocus","_c","$RefreshReg$"],"sources":["/Users/nayanpaavalar/Desktop/CS/Personal_Project1/real_hypertyper/server/client/src/components/TypeWord.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport './TypeWord.css';\n\n//Start Time\nlet t0 = 0;\n\n\nfunction TypeWord({onComplete, currentWord, textForDisplay, finished}) {\n  const [word, setWord] = useState('');\n  //-1 wrong, 0 blank, 1 correct\n  const [correct, setCorrect] = useState(0);\n  //the current state of the word that the person is typing\n\n  //start timer (t0)\n  useEffect(() => {\n    t0 = performance.now();\n  }, []);\n\n  //checks whether current word is right or not\n  const checkWord = (mostUpdated) => {\n    for (let i = 0; i < mostUpdated.length; ++i) {\n      if (textForDisplay.textSample[currentWord][i] !== mostUpdated[i]) {\n        setCorrect(-1);\n        console.log('false');\n        return false;\n      }\n      setCorrect(0);\n    }\n\n    //FOR DEV\n    console.log(mostUpdated.length);\n    console.log(textForDisplay.textSample[currentWord].length);\n    \n    //when the word is complete the input moves on to the next word\n    if (mostUpdated.length === textForDisplay.textSample[currentWord].length) {\n      console.log('true');\n      const forward = true;\n\n      //time from the beginning till the end of the completed word\n      const tAfterWord = performance.now() - t0 ;\n\n      //increments word count\n      onComplete(forward, tAfterWord);\n\n      //ends timer once the user completes the last word  \n      if (currentWord === textForDisplay.numWords - 1) {\n        const t1 = performance.now();\n        console.log(\"Call to doSomething took \" + (t1 - t0) + \" milliseconds.\")\n        //finished, sends end time to App\n        finished(t1 - t0);\n      }\n      //empties input after the word is complete\n      //when this is empty is when someone can go backwards\n      setWord('');\n      //if (currentWord === textForDisplay.numWords)\n    }\n  };//CHECKWORD\n\n  //whenever the user backspace and the input is empty, the word count decrements to the previous word\n  const handleKeyDown = event => {\n    if (event.key === 'Backspace' && word.length === 0 && currentWord > 0) {  \n      const forward2 = false;\n      onComplete(forward2);\n\n      //FOR DEV\n      console.log(\"handleKey Word: \" + currentWord);\n\n      const backWord = textForDisplay.textSample[currentWord - 1]; // -1 is very sussy\n      const numLetters = backWord.length;\n      backWord.substring(0,numLetters - 1);\n      setWord(backWord);\n\n      //FOR DEV\n      console.log('backy!');\n    }\n  }\n\n  //handles any change in the input state\n  const handleChange = (event) => {\n    setWord(event.target.value);\n    checkWord(event.target.value);\n    \n    //FOR DEV\n    console.log(\"-\" + event.target.value + \"-\");\n    console.log(\"Which Word: \" + currentWord);\n    \n  };//HANDLECHANGE\n\n  return (\n    <div>\n      <div className=\"helpText\">Type Here:</div>\n      {\n        correct === -1\n        ? <input \n        className=\"wrong\"\n        type=\"text\" \n        value={word} \n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        autoFocus\n       />\n       : <input \n       className=\"blank\"\n       type=\"text\" \n       value={word} \n       onChange={handleChange}\n       onKeyDown={handleKeyDown}\n       autoFocus\n      />\n      }\n      \n    </div>\n  );\n}\n\nexport default TypeWord;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}